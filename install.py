#!/usr/bin/env python3
"""
MCP Docassemble Installation und Setup Script

Installiert den MCP Server und f√ºhrt initiale Tests durch.
"""

import os
import subprocess
import sys
from pathlib import Path


def run_command(command, description):
    """F√ºhrt einen Befehl aus und gibt Status zur√ºck"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(
            command,
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        print(f"‚úÖ {description} erfolgreich")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} fehlgeschlagen:")
        print(f"   Fehler: {e}")
        if e.stdout:
            print(f"   Stdout: {e.stdout}")
        if e.stderr:
            print(f"   Stderr: {e.stderr}")
        return False


def check_python_version():
    """√úberpr√ºft Python Version"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 oder h√∂her erforderlich")
        print(f"   Aktuelle Version: {sys.version}")
        return False
    
    print(f"‚úÖ Python Version OK: {sys.version_info.major}.{sys.version_info.minor}")
    return True


def install_package():
    """Installiert das Package"""
    commands = [
        ("pip install -e .", "Package Installation"),
        ("pip install -e \".[dev]\"", "Development Dependencies Installation")
    ]
    
    for command, description in commands:
        if not run_command(command, description):
            return False
    
    return True


def run_tests():
    """F√ºhrt grundlegende Tests aus"""
    print("\nüß™ Teste Installation...")
    
    # Test Import
    try:
        from mcp_docassemble import create_server, DocassembleClient
        print("‚úÖ Import Test erfolgreich")
    except ImportError as e:
        print(f"‚ùå Import Test fehlgeschlagen: {e}")
        return False
    
    # Test CLI
    if not run_command("mcp-docassemble --help", "CLI Test"):
        return False
    
    return True


def show_next_steps():
    """Zeigt n√§chste Schritte"""
    print("""
üéâ Installation erfolgreich abgeschlossen!

üìã N√§chste Schritte:

1. Umgebungsvariablen setzen:
   export DOCASSEMBLE_BASE_URL="https://your-docassemble.com"
   export DOCASSEMBLE_API_KEY="your_api_key_here"

2. Verbindung testen:
   mcp-docassemble test-connection

3. MCP Server starten:
   mcp-docassemble serve

üìñ Weitere Informationen:
   - README.md f√ºr ausf√ºhrliche Dokumentation
   - README_FULL.md f√ºr komplette API Referenz

üÜò Support:
   - Siehe README.md f√ºr Kontaktinformationen
   - Logs mit --verbose f√ºr Debugging
""")


def main():
    """Hauptinstallationsfunktion"""
    print("üöÄ MCP Docassemble Installation startet...\n")
    
    # Check Python version
    if not check_python_version():
        sys.exit(1)
    
    # Change to script directory
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    print(f"üìÅ Arbeitsverzeichnis: {script_dir}")
    
    # Install package
    if not install_package():
        print("\n‚ùå Installation fehlgeschlagen")
        sys.exit(1)
    
    # Run tests
    if not run_tests():
        print("\n‚ö†Ô∏è  Installation m√∂glicherweise unvollst√§ndig")
        print("   Versuche manuelle Tests mit:")
        print("   python -c \"from mcp_docassemble import create_server; print('OK')\"")
    
    show_next_steps()


if __name__ == "__main__":
    main()
