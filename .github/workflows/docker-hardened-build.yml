name: Docker Hardened Build

on:
  push:
    branches: [main, develop]
    paths:
      - 'mcp_docassemble/**'
  pull_request:
    branches: [main]
    paths:
      - 'mcp_docassemble/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/mcp-docassemble

jobs:
  quality:
    name: Lint and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: mcp_docassemble
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            mcp_docassemble/requirements.txt
            mcp_docassemble/pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Static security scan
        run: bandit -r src/mcp_docassemble

      - name: Run unit tests
        run: pytest -q

  docker:
    name: Build Hardened Image
    runs-on: ubuntu-latest
    needs: quality
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./mcp_docassemble
          file: ./mcp_docassemble/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image with Trivy
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.19.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: trivy-results.sarif
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'

      - name: Upload Trivy results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Publish build summary
        if: always()
        run: |
          echo "## Docker image" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.build.outputs.digest }}" ]; then
            echo "Digest: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -n "${{ steps.meta.outputs.tags }}" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Tags:" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.meta.outputs.tags }}' >> $GITHUB_STEP_SUMMARY
          fi
