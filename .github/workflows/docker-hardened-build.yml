name: 🐳 Docker Hardened Build & Security Scan

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mcp-docassemble-server

jobs:
  # ============================================================================
  # SECURITY & CODE QUALITY CHECKS
  # ============================================================================
  security-scan:
    name: 🔒 Security & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Security scan with Bandit
        run: |
          bandit -r src/ mcp_docassemble/ -f json -o bandit-report.json || true
          bandit -r src/ mcp_docassemble/ || true

      - name: 🛡️ Dependency vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          safety check || true

      - name: 📋 Code quality with flake8
        run: |
          flake8 src/ mcp_docassemble/ --max-line-length=100 --extend-ignore=E203,W503

      - name: 🎯 Type checking with mypy
        run: |
          mypy src/ mcp_docassemble/ --ignore-missing-imports || true

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ============================================================================
  # AUTOMATED TESTING
  # ============================================================================
  test:
    name: 🧪 Automated Tests
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 📦 Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run unit tests
        run: |
          pytest tests/ -v --cov=mcp_docassemble --cov-report=xml --cov-report=html

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # DOCKER BUILD & SECURITY SCAN
  # ============================================================================
  docker-build:
    name: 🐳 Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: 🔍 Container security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Container security scan with Snyk
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --severity-threshold=high

  # ============================================================================
  # PRODUCTION DEPLOYMENT
  # ============================================================================
  deploy:
    name: 🚀 Production Deployment
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🐳 Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster mcp-docassemble-cluster \
            --service mcp-docassemble-service \
            --force-new-deployment

      - name: 🎯 Deploy to Kubernetes
        run: |
          # Update Kubernetes deployment
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/mcp-docassemble \
            mcp-docassemble=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          kubectl rollout status deployment/mcp-docassemble

  # ============================================================================
  # RELEASE MANAGEMENT
  # ============================================================================
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: docker-build
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD > CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: MCP Docassemble Server ${{ github.ref_name }}
          body: |
            ## 🚀 MCP Docassemble Server ${{ github.ref_name }}
            
            ### 📊 Release Metrics
            - **Docker Image**: `${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
            - **Security Scan**: ✅ Passed
            - **Tests**: ✅ Passed
            - **Multi-Architecture**: linux/amd64, linux/arm64
            
            ### 📋 Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ### 🐳 Docker Usage
            ```bash
            docker run -p 8080:8080 \
              -e DOCASSEMBLE_URL=your-server \
              -e DOCASSEMBLE_API_KEY=your-key \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true

  # ============================================================================
  # NOTIFICATION & MONITORING
  # ============================================================================
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [docker-build, deploy]
    if: always()
    steps:
      - name: 📧 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          username: 'GitHub Actions'
          icon_emoji: ':rocket:'
          text: |
            🐳 MCP Docassemble Server Docker Build: ${{ job.status }}
            📊 Image: ${{ needs.docker-build.outputs.image-tags }}
            🔗 Repository: ${{ github.repository }}
            🌿 Branch: ${{ github.ref_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
