name: CI/CD Pipeline - MCP Docassemble Server

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json || true
      
    - name: Run Safety vulnerability scan
      run: safety check --json --output safety-report.json || true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run unit tests
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-py${{ matrix.python-version }}-${{ github.sha }}
        path: |
          htmlcov/
          coverage.xml

  # Docker Build and Security Scan
  docker-build:
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      if: github.event_name != 'pull_request'
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: github.event_name != 'pull_request'
      with:
        sarif_file: 'trivy-results.sarif'

  # API Integration Tests
  api-test:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    
    services:
      docassemble:
        image: jhpyle/docassemble:latest
        ports:
          - 8080:80
        env:
          DASUPERUSERPASSWORD: test123
          DABACKUPDAYS: 14
        options: >-
          --health-cmd "curl -f http://localhost/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Wait for Docassemble
      run: |
        for i in {1..60}; do
          if curl -f http://localhost:8080; then
            echo "Docassemble is ready!"
            break
          fi
          echo "Waiting for Docassemble... ($i/60)"
          sleep 10
        done
        
    - name: Run API integration tests
      env:
        DOCASSEMBLE_URL: http://localhost:8080
        DOCASSEMBLE_API_KEY: test-key
      run: |
        echo "🧪 Running API integration tests..."
        echo "Server: $DOCASSEMBLE_URL"
        # Add actual API tests here when available
        
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      with:
        name: api-test-results-${{ github.sha }}
        path: |
          test-reports/
          *.json

  # Release Management
  release:
    runs-on: ubuntu-latest
    needs: [docker-build, api-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate Release Notes
      id: release_notes
      run: |
        echo "## 🚀 MCP Docassemble Server Release" > release_notes.md
        echo "" >> release_notes.md
        echo "### 📦 Docker Images" >> release_notes.md
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> release_notes.md
        echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 🔧 Changes" >> release_notes.md
        git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md || echo "- Initial release" >> release_notes.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  # Package Integration Status
  package-status:
    runs-on: ubuntu-latest
    if: always()
    needs: [security-scan, test, docker-build]
    
    steps:
    - name: Package Integration Status
      run: |
        echo "## 📦 Package Integration Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Docker Build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Ready for Deployment:" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.security-scan.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "✅ **YES** - All checks passed!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **NO** - Some checks failed" >> $GITHUB_STEP_SUMMARY
        fi
