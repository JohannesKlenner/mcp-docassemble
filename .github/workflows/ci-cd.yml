name: CI/CD Pipeline - MCP Docassemble Server

on:
  push:
    branches: [main, develop]
    tags: ['v*']
    paths:
      - 'mcp_docassemble/**'
  pull_request:
    branches: [main]
    paths:
      - 'mcp_docassemble/**'

defaults:
  run:
    shell: bash

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mcp-docassemble
  PROJECT_PATH: mcp_docassemble

jobs:
  security-scan:
    name: Security and Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PROJECT_PATH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
            mcp_docassemble/requirements.txt
            mcp_docassemble/pyproject.toml

      - name: Install security tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit
        run: |
          bandit -r src -f json -o bandit-report.json || true
          bandit -r src || true

      - name: Run Safety
        run: safety check --json --output safety-report.json || true

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.sha }}
          path: |
            ${{ env.PROJECT_PATH }}/bandit-report.json
            ${{ env.PROJECT_PATH }}/safety-report.json
          if-no-files-found: ignore

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    defaults:
      run:
        working-directory: ${{ env.PROJECT_PATH }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            mcp_docassemble/requirements.txt
            mcp_docassemble/pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run pytest
        run: pytest --cov=mcp_docassemble --cov-report=xml --cov-report=term-missing

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-py${{ matrix.python-version }}-${{ github.sha }}
          path: |
            ${{ env.PROJECT_PATH }}/coverage.xml
          if-no-files-found: error

  docker-build:
    name: Build and Scan Image
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./mcp_docassemble
          file: ./mcp_docassemble/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image with Trivy
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.19.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true

      - name: Upload Trivy results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Summarise build
        if: always()
        run: |
          echo "## Docker image" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Tags:" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' >> $GITHUB_STEP_SUMMARY
          echo "Digest: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY

  api-test:
    name: API Smoke Test
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    defaults:
      run:
        working-directory: ${{ env.PROJECT_PATH }}
    services:
      docassemble:
        image: jhpyle/docassemble:latest
        ports:
          - 8080:80
        env:
          DASUPERUSERPASSWORD: test123
          DABACKUPDAYS: 14
        options: >-
          --health-cmd "curl -f http://localhost/health || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Wait for Docassemble
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:8080; then
              echo 'Docassemble is ready'
              exit 0
            fi
            sleep 10
          done
          echo 'Docassemble did not become ready in time'
          exit 1

      - name: Run smoke tests
        env:
          DOCASSEMBLE_URL: http://localhost:8080
          DOCASSEMBLE_API_KEY: test-key
        run: pytest tests/test_server_management.py -q

  package-status:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [security-scan, test, docker-build, api-test]
    steps:
      - name: Write summary
        run: |
          echo "## MCP Docassemble CI/CD" >> $GITHUB_STEP_SUMMARY
          echo "Security scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "Docker build: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "API smoke: ${{ needs.api-test.result }}" >> $GITHUB_STEP_SUMMARY
